name: Semantic Release & Deploy to CodeArtifact

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  id-token: write # for AWS OIDC

jobs:
  release:
    runs-on: ubuntu-latest
    concurrency:
      group: semantic-release-codeartifact
      cancel-in-progress: true

    env:
      PYTHON_VERSION: 3.12
      AWS_REGION: ${{ secrets.AWS_REGION }}
      CODEARTIFACT_PYTHON_REPO: ${{ secrets.CODEARTIFACT_PYTHON_REPO }}
      DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
      DOMAIN_OWNER: ${{ secrets.DOMAIN_OWNER }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Skip if [skip ci]
        if: contains(github.event.head_commit.message, '[skip ci]')
        run: exit 0

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Get next semantic version but DO NOT tag yet
      - name: Get next version (dry run)
        id: get_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          dry_run: true

      - name: Update pyproject.toml with New Version
        id: update_pyproject
        run: |
          version="${{ steps.get_tag.outputs.new_version }}"
          echo "NEXT_VERSION=$version" >> $GITHUB_ENV
          sed -i "s/^version = \".*\"/version = \"$version\"/" pyproject.toml

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install Dependencies
        run: poetry install --no-interaction --no-root

      - name: Build Project
        run: poetry build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_CODEARTIFACT_PYTHON_IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get CodeArtifact Token
        run: |
          export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token \
            --domain ${{ env.DOMAIN_NAME }} \
            --domain-owner ${{ env.DOMAIN_OWNER }} \
            --query authorizationToken \
            --output text)
          echo "CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN" >> $GITHUB_ENV

      - name: Publish to CodeArtifact
        run: |
          poetry config repositories.codeartifact https://${{ env.DOMAIN_NAME }}-${{ env.DOMAIN_OWNER }}.d.codeartifact.${{ env.AWS_REGION }}.amazonaws.com/pypi/${{ env.CODEARTIFACT_PYTHON_REPO }}/
          poetry config pypi-token.codeartifact ${{ env.CODEARTIFACT_AUTH_TOKEN }}
          poetry publish --repository codeartifact

      # Commit version bump to pyproject.toml
      - name: Commit version bump
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add pyproject.toml
          git commit -m "ci: bump version to v${{ env.NEXT_VERSION }} [skip ci]" || echo "Nothing to commit"
          git push origin main

      # Tag the commit with the new version
      - name: Tag version (vX.Y.Z)
        run: |
          git tag "v${{ env.NEXT_VERSION }}"
          git push origin "v${{ env.NEXT_VERSION }}"

      # Create GitHub Release
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ env.NEXT_VERSION }}
          name: v${{ env.NEXT_VERSION }}
          body: v${{ env.NEXT_VERSION }}
          artifacts: |
            dist/*.whl
            dist/*.tar.gz
